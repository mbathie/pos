DONE - folders for shop items
DONE - bg colours for shop items, icons / images
DONE - customer management
DONE - add/lookup customer(s) at transaction time
DONE - checkout process for day pass
DONE - checkout process for courses / classes
DONE - backend Schedule table for classes courses
DONE - backend Orders table for shop items
DONE - ability to add multiple prices for classes/courses within a price.
DONE - waivers

MUST HAVES
-----------------------
DONE - Setting for a product/category to go to bump screen or not
DONE - Name field (not email/phone) required during checkout (only if bump screen item)
DONE - classes and courses - dedicated checkin button
DONE - bump screen for kitchen staff to see/manage orders - order table, filtering
DONE - admin / list view page for classes / courses
DONE - admin / list view page for casual entries
DONE - membership mumber assignment on creation
DONE - item description
DONE - ability to edit folder colour
DONE - waivers
DONE - DOB field for waiver and gender
DONE - course / class checkout, must check remaining capacity (no overbooking)
DONE - checkout shop item, folder should open into new screen (use breadcrumb menu)
DONE - During purchase have a hot button for cart at bottom right. Uses permanent side bar now for cart during the purchase process
DONE - use baked in calendar component instead of 3rd party one https://ui.shadcn.com/docs/components/calendar
DONE on transaction list view page- ability to look up previous sales and do refunds, etc
DONE - ability to add a discount at sale time
DONE - set end date 
DONE  - set recurring (expiry null)
DONE  - assign discounts to products, so they are automatically applied at checkout time.
DONE  - if a discount is product specific i.e. just to coffees, and there are other products (not coffees), then make sure the discount only gets applied to the relevant products
DONE - accounting categories, GST or not
DONE - transaction list view page
DONE - individual transaction view page, allow for refunds (partial and full), and view order details.

DONE - Login as any account staff, admin, MANAGER
DONE - PIN number per staff, required before any purchase when sale is clicked
DONE - need to make sure if logged in as admin role, Jnr staff can't see admin functions
- need to select terminal when pos is first setup - set a cookie so it knows for next time.


DONE - when purchasing a shop item - make qty automatically 1
DONE - Par warning - only for manager, admin's

DONE - create new staff accounts
- connect terminals to locations
DONE - roles for staff, admins, bump screens, terminals
DONE  - ADMIN, MANAGER, STAFF, TERMINAL
DONE - set a pin if no pin is set for new employees
- terminal integration (using real terminal)
- checkout process for subscriptions
  - backend Membership table for memberships
- specify what products at what locations
- Email out QR code for classes and courses & memberships
  - ability scan the QR to checkin at the front entry with a dedicated device - should confirm they have checked in.
  - dedicated page to see people checking in - list view, with status/ etc
- should be able to assign arbitrary discount amounts or percentages at checkout time (at MANAGER level only)
- Customer list view page
- basic accounting reporing
- stock items need to have a customer assigned to them, i.e. pair of shoes for warrenty.
- online orders for classes/courses/memberships
  - also abiltiy to view / edit profile
- refunds
- 4 digit PIN numbers - enforce some basic rules, i.e. not 1234, 1111, etc.

- export CSV of purchases (for marketing purposes)

DONE - Par/qty screen
DONE  - par = min quantity before warning, i.e. to place another order with the supplier
DONE  - qty = click update qty - add/subttact or overrise total qty of stock (required for launch)
DONE  - list view of all items, should be able to edit product name/price also
  - tag system - new feature too add generic tags per product
DONE  - notifications when stock (par) is low - alert / bell icon down the bottom left
DONE  - ability to filter for items below or at par, or cloase to par

NICE TO HAVES
-----------------------
  - ability to edit orders, after its complete - i.e. they wanted a chololate shake instead of vanilla

  - FOB gate entry based on memberships
  - customer rewards & reward packages assigned to products
  - gift cards
  - grouping together multiple products - for example a school holiday program
    - e.g. 1x drink, 1x class
    - also regarding stock qty, it should deduct the qty on the day of the event
    - should also add to the bump screen any items that need making on the day of the event
  - marketing
  - ?lookup existing customer before completing waiver, might have bought coffee previously, but wants gym membership





PAR QTY system
----------------
- idea is to integrate an ability to track qty and par of individual stock items for category.menu='shop' items
- on the /products/shop page, need 2 new fields below accounting code called Qty and Par (integers). They define the total qty of this item in stock and par represents at what level remaining of the stock to issue a warning at (we'll handle how display the warning later - not at this stage). We can store these values in the Products table
- need a new /manage/products page similar to the /manage/transactions page which lists all products from all categories, with filters
  up the top of the page to filter by category, and a search box to filter by product name, and clear filter button.
  columns should be product name, category name, accounting code, folder (only relevant for shop items), send to bump (bool)


ROLES system
===================
- 





Whenever anyone clicks on a /shop/* page it should throw a shared component modal using https://ui.shadcn.com/docs/components/dialog
which prompts the user for their employee pin number.
- need a new API route which allows to lookup an employee of the same Org (based on current session) based on the pin number entered
- If its the same employee thats already logged in, great, update the global variable (employee) in lib/globals.js and set employee.pinAuth: timestamp
- If its not the same user then we need to re-authenticate the user similar to how the API route does it when you switch locations (/api/auth/location) except
what it does it switch the authenticated user (and cookie token) to match that of the employee who's pin matches. It should then set employee.pinAuth: timestamp variable also