generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Org {
  id         Int        @id @default(autoincrement())
  name       String
  phone      String
  locations  Location[]
  employees  Employee[]
  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id         Int               @id @default(autoincrement())
  name       String
  orgId      Int
  org        Org               @relation(fields: [orgId], references: [id])
  employees  Employee[]
  categories Category[]
  products   ProductLocation[]
  customers  Customer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  hash       String
  orgId      Int
  org        Org      @relation(fields: [orgId], references: [id])
  locationId Int
  location   Location @relation(fields: [locationId], references: [id])
  role       RoleType

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Customer {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  email     String     @unique
  address   Json
  hash      String
  photoUrl  String?
  locations Location[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String
  orgId      Int
  org        Org         @relation(fields: [orgId], references: [id])
  recurring Boolean @default(false)

  locations  Location[]
  variations Variation[]
  products Product[]
}


model Price {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  amount    Float
  name      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Product {
  id        Int               @id @default(autoincrement())
  name      String
  locations ProductLocation[]
  prices    Price[]

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  
  data      Json?

  variants ProductVariant[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}


model Variation {
  id   Int    @id @default(autoincrement())
  name String

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  multi Boolean @default(false)
  variants Variant[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
}

model ProductVariant {
  productId  Int
  variantId  Int
  enabled    Boolean @default(true)

  product    Product @relation(fields: [productId], references: [id])
  variant    Variant @relation(fields: [variantId], references: [id])

  @@id([productId, variantId])  // Composite primary key
}

model Variant {
  id     Int    @id @default(autoincrement())
  name   String
  amount Float
  
  products   ProductVariant[]
  variationId Int
  variation   Variation @relation(fields: [variationId], references: [id])

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
}

model ProductLocation {
  locationId Int
  productId  Int
  enabled    Boolean @default(true)

  location Location @relation(fields: [locationId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@id([locationId, productId]) // Composite primary key
}

enum RoleType {
  ADMIN
  MANAGER
  STAFF
  TERMINAL
}

enum ProductType {
  RECURRING
  ONCEOFF
}
